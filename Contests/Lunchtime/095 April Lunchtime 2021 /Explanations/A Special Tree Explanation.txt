- Suppose L is the LCA of B and some special node u.
    - d(A, u) - d(B, u) = d(A, L) + d(u, L) - d(L, u) - d(u, B) = d(A, L) - d(B, L)
    - This is maximised by choosing the L with the greatest depth
    
- If v is a vertex which has a special mode in its sub tree, every ancestor of v also has this property.

- We only need to find the first ancestor of B, which has a special node in its sub tree.
- Root the tree at A for convenience.

- My initial solution was binary searching on the LCA but that causes an additional $\log$ factor. When we are at node v, move up by length 2^i if that vertex also does not have a special node in its sub tree.

- From B, find the closest ancestor which does not have a special node in it's subtree.
    - Suppose the distance from L to B is 100100 in binary.
        - First we will go to the 2^5 th ancestor and then to the 2^2 nd ancestor and then to the 2^0 th ancestor to reach L.
        
    - From B, we will climb up 2^i if the ancestor at 2^i levels up is not special.
    - Be careful to do binary lifting in descending powers of 2 and not ascending.

-----

void solve()
{
    int no_of_vertices, special_vertices, a;
    cin >> no_of_vertices >> special_vertices >> a;

    initialise(no_of_vertices);

    for(int i = 1; i <= special_vertices; i++)
    {
        int v;
        cin >> v;

        is_special[v] = true;
    }

    int no_of_edges = no_of_vertices - 1;

    for(int i = 1; i <= no_of_edges; i++)
    {
        int u, v;
        cin >> u >> v;

        tree[u].push_back(v);
        tree[v].push_back(u);
    }


    depth[0] = -1;
    dfs(a, 0);
    fill_parents(no_of_vertices);

    vector <pair <int, int> > answer(no_of_vertices + 1);
    for(int i = 1; i <= no_of_vertices; i++)
    {
        if(nearest_special[i] != 0)
        {
            answer[i].first = depth[i];

            answer[i].second = nearest_special[i];

            continue;
        }

        int ancestor, distance_to_ancestor;

        int v = i;

        for(int l = MAX_L - 1; l >= 0; l--)
        {
            ancestor = parent[v][l];

            if(ancestor != 0 && nearest_special[ancestor] == 0)
            {
                v = ancestor;
            }
        }

        ancestor = parent[v][0];

        distance_to_ancestor = depth[i] - depth[ancestor];

        answer[i].first = depth[ancestor] - distance_to_ancestor;

        answer[i].second = nearest_special[ancestor];
    }

    for(int i = 1; i <= no_of_vertices; i++)
    {
        cout << answer[i].first << " ";
    }
    cout << "\n";

    for(int i = 1; i <= no_of_vertices; i++)
    {
        cout << answer[i].second << " ";
    }
    cout << "\n";
}
