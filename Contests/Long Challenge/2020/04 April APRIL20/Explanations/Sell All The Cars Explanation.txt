It is always optimal to sell the cars in descending order

The maximum possible profit = Sum(A) - N(N - 1)/2

If some car reaches the cost 0, then it won't reduce so much and the profit increases

This means that it is better to have the lower cost cars as late as possible.
This is because we want as many 'premature' 0s as possible.

-----

Let us suppose A[i] > A[j] and i < j

Now, if we sell on day i and on day j the profit is

-----

Case 1 - A[j] >= j

Profit = (A[i] - i) + (A[j] - j)

If we exchange them, Profit becomes (A[j] - i) + (A[i] - j)

It stays the same

------

Case 2 - i < A[j] < j

Profit = max(A[i] - i, 0) + max(A[j] - j, 0) = max(A[i] - i, 0) + 0

The number of 'subtractions' is = A[j]

If we swap them and make the Profit = max(A[j] - i, 0) + max(A[i] - j, 0)

The number of subtractions increases from A[j] to min(A[i], j)
We have increased the number of subtractions from the profit

-----

Case 3 - A[j] < i

Profit = max(A[i] - i, 0) + max(A[j] - j, 0) = max(A[i] - i, 0) + 0

When we swap it now,

Profit = max(A[j] - i, 0) + max(A[i] - j, 0)
= 0 + max(A[i] - j, 0)

The number of subtractions can only increase since A[i] > A[j]

-----

In no case, are we better off by swapping.
This is why we sell them in descending (or non-increasing) order

-----

void solve()
{
    int no_of_elements;
    scanf("%d", &no_of_elements);

    priority_queue <int> PQ;
    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        scanf("%d", &A[i]);

        PQ.push(A[i]);
    }

    const int MOD = 1e9 + 7;
    long long answer = 0;
    for(int i = 0; PQ.size() > 0; i++)
    {
        while(PQ.size() > 0 && PQ.top() <= i)
        {
            PQ.pop();
        }

        if(PQ.size() == 0)
        {
            break;
        }

        answer += (PQ.top() - i);

        answer %= MOD;

        PQ.pop();
    }

    printf("%lld\n", answer);
}
