Here is the idea -
All integers except those = 2 (mod 4) can be written as p^2 - q^2

-----

There are only 2 quadratic residues mod 4 - 0 and 1

p^2 - q^2 can take the values (3, 0, 1) (mod 4)

It can never take the value = 2 (mod 4)

-----

How to write integers = 1, 3 (mod 4) ?

Any odd integer can be written as

(n + 1)^2 - n^2 = (2n + 1)

We can write any multiple of 4 in the following form

(n + 2)^2 - n^2 = 4 + 4n

-----

We want to count the number of subarrays such that their
product exponent of 2 is exactly 1

First, we will replace all the A[i] by exponent(A[i]) of 2 in it
Now, the question is reduced to counting the number of subarrays
[L, R] such that

Sum[R] - Sum[L - 1] = 1

We will keep track of all the frequencies of the prefix sums
and add frequency(Sum[i] - 1) to the answer

-----

Be careful while factorising 0

-----

long long total(long long n)
{
    return (n*(n - 1)/2) + n;
}

void solve()
{
    int no_of_elements;
    scanf("%d", &no_of_elements);

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        scanf("%d", &A[i]);
    }

    vector <int> exponent_2(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        while(A[i] != 0 && A[i]%2 == 0)
        {
            A[i] /= 2;

            exponent_2[i]++;
        }
    }

    vector <int> exponent_sum(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
    {
        exponent_sum[i] = exponent_sum[i - 1] + exponent_2[i];
    }

    long long bad_sequences = 0;
    map <long long, int> frequency;
    frequency[0]++;
    for(int i = 1; i <= no_of_elements; i++)
    {
        bad_sequences += frequency[exponent_sum[i] - 1];

        frequency[exponent_sum[i]]++;
    }

    long long good_sequences = total(no_of_elements) - bad_sequences;

    cout << good_sequences << "\n";
}
