Let us sort the elements of A. 

Now, let us see the i-th element of A. 

Now, let us count the contribution of each element of A. 

Now, how many sequences exist with A[i] ? 

We may choose (k - 1) elements from the remaining (n - 1) elements !

Now, A[i] does not get counted in sequences where 
1. It is the smallest. 
2. It is the largest. 

--------------------------------------

How many sequences is it the largest ? 

We have to choose (k - 1) elements from the first (i - 1) elements.

How many sequences is it the smallest ?

We have to choose (k - 1) elements from the last (N - i) elements. 

-------------------------------------------

Now, total contribution of A[i] to the answer is 

A[i]^{ C(N - 1, K - 1) - C(i - 1, K - 1) - C(N - i, K - 1) }

--------------------------------------------------------------


void solve()
{
    int no_of_elements, sequence_length;
    scanf("%d %d", &no_of_elements, &sequence_length);

    vector <int> A(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++)
        scanf("%d", &A[i]);

    sort(all(A));

    long long answer = 1;

    for(int i = 1; i <= no_of_elements; i++)
    {
        long long total_sequences = combinations[no_of_elements - 1][sequence_length - 1];
        long long sequences_where_smallest = 0, sequences_where_largest = 0;

        if(no_of_elements - i >= sequence_length - 1)
            sequences_where_smallest = combinations[no_of_elements - i][sequence_length - 1];

        if(i - 1 >= sequence_length - 1)
            sequences_where_largest = combinations[i - 1][sequence_length - 1];

        answer *= power(A[i], total_sequences - sequences_where_largest - sequences_where_smallest, MOD);
        answer %= MOD;
    }

    printf("%lld\n", answer);
}

--------------------------------------

Now, here is where the trick lies and where I made the mistake. 

We have to use Fermat's Little Theorem here. 

x^{P - 1} = 1 (mod P), if P is prime. 

So, we need to evaluate A[i]^{ (.. . )%(P - 1) }

Now, I evaluated { C(n - 1, K - 1) - C(i - 1, K - 1) - C(N - i, K - 1) } mod P - 1, but I made the mistake of calculating the C(n, r) mod P ! This is a mistake !

All the C(n, r) needs to be computed mod (P - 1), not mod P since that entire expression needs to be mod (P - 1)

-------------------------------------------------------


void precompute_combinations()
{
    for(int n = 0; n < MAX_N; n++)
    {
        for(int r = 0; r <= n; r++)
        {
            if(r == 0 || r == n)
                combinations[n][r] = 1;
            else
                combinations[n][r] = (combinations[n - 1][r - 1] + combinations[n - 1][r])%(MOD - 1);
        }
    }
}

------------------------------------------------

Keep the power positive using Fermat's Little Theorem. Keep track of the power mod (M - 1) !

long long power(long long x, long long power, long long mod)
{
    //Keeping power positive using Fermat's Little Theorem
    while(power < 0)
        power += mod - 1;

    long long result = 1;

    while(power)
    {
        if(power%2 == 1)
            result = (result*x)%mod;

        x = (x*x)%mod;
        power = power >> 1;
    }

    return result;
}
