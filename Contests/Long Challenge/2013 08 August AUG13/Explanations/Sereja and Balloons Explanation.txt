Let us analyze the number of new segments that could potentially become good after a point update. 

If A[i] > 0, then there is no change in the answer. 
Otherwise, suppose A[i] = 0

Let [L[i], R[i]] be the size of the largest segment containing A[i], consisting of all 0s. 
We want to know the number of segments such that 
1. L[i] <= L
2. R <= R[i] 

These are the segments that become good after performing this operation. 

We can solve this problem with a segment tree. 
1. Build an array where the index is L and the value is R. 
2. Find the minimum value in the range [L[i], N] of the array. 
3. If this minimum value R is < R[i], then increment the number of good segments by 1. 
4. Set S[L] = oo after this so that this segment does not get counted again in the future. 
This is the same as removing [L, R] and inserting [L, oo]

-----

How to update L[i], R[i] after each subtraction operation ? 

We can use the same idea we use to keep track of the root of a component in DSU 
Initially every vertex is it's own parent. 
While updating, keep traversing up till we meet a vertex that is it's own component and then set the parent of all vertices 
that were visited to this parent 

This is quite efficient amortized. 

int get_zero_left(int i)
{
    if(i == zero_left[i])
    {
        return zero_left[i];
    }

    zero_left[i] = get_zero_left(zero_left[i]);
    return zero_left[i];
}

int get_zero_right(int i)
{
    if(i == zero_right[i])
    {
        return zero_right[i];
    }

    zero_right[i] = get_zero_right(zero_right[i]);
    return zero_right[i];
}

-----

While performing a subtraction operation, also update L[i - 1] and R[i + 1] if applicable 

Updating only one neighbour is enough. We don't have to update the full segment L[i - 1], L[i - 2], L[i - 3], ... 

When we need to know the leftmost of any of these points, 
the get_zero_left function above would give us the head of the component and update the left pointer accordingly

void subtract(int index)
{
    A[index]--;

    if(A[index] == 0 && A[index - 1] == 0)
    {
        zero_left[index] = zero_left[index - 1];
        zero_right[index - 1] = index;
    }

    if(A[index] == 0 && A[index + 1] == 0)
    {
        zero_right[index] = zero_right[index + 1];
        zero_left[index + 1] = index;
    }
}

-----

Segment Tree Functions 

This is a segment tree that returns the segment with the minimum value as well as it's index in S. 
This is required to set the value to oo after counting it. 

I have built the segment tree on [1, number of segments] rather than [1, N] 
So, there is a small helper function, which will return the first segment who's left is >= L 

Instead of querying the segment tree on [L, oo], we will query it on [first segment who's left >= L, oo] 

This was done as it makes building the segment tree and updates easier. 

void calculate_earliest_segment_for_each_position(int no_of_elements, int no_of_segments, vector <pair <int, int> > &S)
{
    for(int i = 1; i <= no_of_elements + 1; i++)
    {
        first_segment_with_left[i] = no_of_segments + 1;
    }

    for(int i = no_of_segments; i >= 1; i--)
    {
        first_segment_with_left[S[i].first] = i;

        //cout << "Segment First segment with left " << S[i].first << " = " << first_segment_with_left[S[i].first] << "\n";
    }

    for(int i = no_of_elements; i >= 1; i--)
    {
        if(first_segment_with_left[i] == no_of_segments + 1)
        {
            first_segment_with_left[i] = first_segment_with_left[i + 1];
        }

        //cout << "First segment with left " << i << " = " << first_segment_with_left[i] << "\n";
    }
}


Build 

void build(int n, int left, int right, vector <pair <int, int> > &S)
{
    if(left == right)
    {
        int index = left;
        min_tree[n].first = S[index].second;
        min_tree[n].second = index;
        return;
    }

    int mid = (left + right)/2;
    build(LEFT(n), left, mid, S);
    build(RIGHT(n), mid + 1, right, S);

    min_tree[n] = min(min_tree[LEFT(n)], min_tree[RIGHT(n)]);
}

----

Update 


void update(int n, int left, int right, int index, int value)
{
    if(index < left || right < index)
    {
        return;
    }

    if(left == right)
    {
        min_tree[n].first = value;
        return;
    }

    int mid = (left + right)/2;
    update(LEFT(n), left, mid, index, value);
    update(RIGHT(n), mid + 1, right, index, value);

    min_tree[n] = min(min_tree[LEFT(n)], min_tree[RIGHT(n)]);
}

----

Range Minima 

pair <int, int> get_minimum(int n, int left, int right, int query_left, int query_right)
{
    if(query_right < left || right < query_left || right < left || query_right < query_left)
    {
        return make_pair(oo, 0);
    }

    if(query_left <= left && right <= query_right)
    {
        return min_tree[n];
    }

    int mid = (left + right)/2;
    pair <int, int> left_answer = get_minimum(LEFT(n), left, mid, query_left, query_right);
    pair <int, int> right_answer = get_minimum(RIGHT(n), mid + 1, right, query_left, query_right);

    pair <int, int> answer = min(left_answer, right_answer);

    return answer;
}

----
