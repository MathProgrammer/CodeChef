We need to try to ensure an overlap of the segments we are querying and make them as
small as possible in order to extract insight from it.

We will query A[1, 2] and A[2, 3].

Let us look at all 4 cases.

Let X = max(A[1], A[2]) - min(A[2], A[3])
and Y = max(A[2], A[3]) - min(A[1], A[2])

-----

1. A[1] < A[2] < A[3]

X = A[2] - A[2],
Y = A[3] - A[1]

2. A[1] < A[2] > A[3]

X = A[2] - A[3]
Y = A[2] - A[1]

3. A[1] > A[2] > A[3]

X = A[1] - A[2]
Y = A[2] - A[2]

4. A[1] > A[2] < A[3]

X = A[1] - A[2]
Y = A[3] - A[2]

-----

Astonishingly, in all 4 cases,

A[3] = Y - X + A[1]
A[1] = X - Y + A[3]

-----

Similarly, A[i + 2] = Y[i] - X[i] + A[i]

We can use this identity to guess all the odd indices in the order

1 -> 3 -> 5 -> ... -> n - 1

And then guess the even indices in the order

n -> n - 2 -> n - 4 -> .... -> 2

-----

void ask(int left_1, int right_1, int left_2, int right_2, int &answer)
{
    cout << "Q " << left_1 << " " << right_1 << " " << left_2 <<  " " << right_2 << "\n";
    cout.flush();

    cin >> answer;
}

int main()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <int> A(no_of_elements + 1);
    cin >> A[1] >> A[no_of_elements];

    vector <int> X(no_of_elements + 1), Y(no_of_elements + 1);
    for(int i = 1; i + 2 <= no_of_elements; i++)
    {
        int left_1 = i, right_1 = i + 1;
        int left_2 = i + 1, right_2 = i + 2;

        ask(left_1, right_1, left_2, right_2, X[i]);
        ask(left_2, right_2, left_1, right_1, Y[i]);
    }

    for(int i = 1; i + 2 <= no_of_elements; i += 2)
    {
        A[i + 2] = Y[i] - X[i] + A[i];
    }

    for(int i = no_of_elements - 2; i >= 1; i -= 2)
    {
        A[i] = X[i] - Y[i] + A[i + 2];
    }

    cout << "! ";
    for(int i = 1; i <= no_of_elements; i++)
    {
        cout << A[i] << " ";
    }

    cout << "\n";
    return 0;
}
